// Mocks generated by Mockito 5.4.4 from annotations
// in multichoice/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:isar/isar.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:multichoice/models/dto/export_dto.dart' as _i3;
import 'package:multichoice/repositories/implementation/entry/entry_repository.dart'
    as _i6;
import 'package:multichoice/repositories/implementation/tabs/tabs_repository.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIsar_0 extends _i1.SmartFake implements _i2.Isar {
  _FakeIsar_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTabsDTO_1 extends _i1.SmartFake implements _i3.TabsDTO {
  _FakeTabsDTO_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TabsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTabsRepository extends _i1.Mock implements _i4.TabsRepository {
  @override
  _i2.Isar get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeIsar_0(
          this,
          Invocation.getter(#db),
        ),
        returnValueForMissingStub: _FakeIsar_0(
          this,
          Invocation.getter(#db),
        ),
      ) as _i2.Isar);

  @override
  _i5.Future<int> addTab(
    String? title,
    String? subtitle,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTab,
          [
            title,
            subtitle,
          ],
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<List<_i3.TabsDTO>> readTabs() => (super.noSuchMethod(
        Invocation.method(
          #readTabs,
          [],
        ),
        returnValue: _i5.Future<List<_i3.TabsDTO>>.value(<_i3.TabsDTO>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i3.TabsDTO>>.value(<_i3.TabsDTO>[]),
      ) as _i5.Future<List<_i3.TabsDTO>>);

  @override
  _i5.Future<_i3.TabsDTO> getTab(int? tabId) => (super.noSuchMethod(
        Invocation.method(
          #getTab,
          [tabId],
        ),
        returnValue: _i5.Future<_i3.TabsDTO>.value(_FakeTabsDTO_1(
          this,
          Invocation.method(
            #getTab,
            [tabId],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i3.TabsDTO>.value(_FakeTabsDTO_1(
          this,
          Invocation.method(
            #getTab,
            [tabId],
          ),
        )),
      ) as _i5.Future<_i3.TabsDTO>);

  @override
  _i5.Future<bool> deleteTab(int? tabId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTab,
          [tabId],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [EntryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockEntryRepository extends _i1.Mock implements _i6.EntryRepository {
  @override
  _i2.Isar get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeIsar_0(
          this,
          Invocation.getter(#db),
        ),
        returnValueForMissingStub: _FakeIsar_0(
          this,
          Invocation.getter(#db),
        ),
      ) as _i2.Isar);

  @override
  _i5.Future<int> addEntry(
    int? tabId,
    String? title,
    String? subtitle,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addEntry,
          [
            tabId,
            title,
            subtitle,
          ],
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<List<_i3.EntryDTO>> readEntries(int? tabId) => (super.noSuchMethod(
        Invocation.method(
          #readEntries,
          [tabId],
        ),
        returnValue: _i5.Future<List<_i3.EntryDTO>>.value(<_i3.EntryDTO>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i3.EntryDTO>>.value(<_i3.EntryDTO>[]),
      ) as _i5.Future<List<_i3.EntryDTO>>);

  @override
  _i5.Future<List<_i3.EntryDTO>> readAllEntries() => (super.noSuchMethod(
        Invocation.method(
          #readAllEntries,
          [],
        ),
        returnValue: _i5.Future<List<_i3.EntryDTO>>.value(<_i3.EntryDTO>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i3.EntryDTO>>.value(<_i3.EntryDTO>[]),
      ) as _i5.Future<List<_i3.EntryDTO>>);

  @override
  _i5.Future<bool> deleteEntry(
    int? tabId,
    int? entryId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteEntry,
          [
            tabId,
            entryId,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}
