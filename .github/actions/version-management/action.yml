name: 'Version Management'
description: 'Manages version bumping based on PR labels'

inputs:
  github-token:
    description: 'GitHub token for authentication'
    required: true
  pubspec-path:
    description: 'Path to the pubspec.yaml file'
    required: true
    default: 'apps/multichoice/pubspec.yaml'
  branch-name:
    description: 'Branch name to push changes to'
    required: true
    default: 'develop'
  bump-type:
    description: 'Type of version bump (major, minor, patch, none)'
    required: true

outputs:
  version_number:
    description: 'The new version number'
    value: ${{ steps.version_update.outputs.version_number }}

runs:
  using: "composite"
  steps:
    - name: Get Latest Tag
      id: get_latest_tag
      shell: bash
      run: |
        git fetch --tags
        latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) || echo "0.0.0")
        echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

    - name: Get Current Version From pubspec.yaml
      id: get_current_version
      shell: bash
      run: |
        current_version=$(grep 'version:' ${{ inputs.pubspec-path }} | sed 's/version: //')
        echo "current_version=$current_version" >> $GITHUB_OUTPUT

    - name: Update Version
      id: version_update
      if: ${{ inputs.bump-type != 'none' }}
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        REPO: ${{ github.repository }}
      run: |
        latest_tag=${{ steps.get_latest_tag.outputs.latest_tag }}
        current_version=${{ steps.get_current_version.outputs.current_version }}
        
        if [[ "$current_version" > "$latest_tag" ]]; then
          echo "Version in pubspec.yaml ($current_version) is ahead of latest tag ($latest_tag). Proceeding."
          echo "version_number=$current_version" >> $GITHUB_OUTPUT
        else
          echo "Updating version in pubspec.yaml."
          # Extract version and build number
          version_part=$(echo $current_version | cut -d'+' -f1)
          build_number=$(echo $current_version | cut -d'+' -f2)
          
          # Split version into major, minor, patch
          IFS='.' read -r major minor patch <<< "$version_part"
          
          # Increment version based on bump-type
          bump_type="${{ inputs.bump-type }}"
          if [ "$bump_type" = "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "$bump_type" = "minor" ]; then
            minor=$((minor + 1))
            patch=0
          elif [ "$bump_type" = "patch" ]; then
            patch=$((patch + 1))
          fi
          
          new_version="$major.$minor.$patch"
          new_build_number=$((build_number + 1))
          
          # Update pubspec.yaml with new version and build number
          sed -i "s/version: .*/version: $new_version+$new_build_number/" ${{ inputs.pubspec-path }}
          
          git config --global user.name 'VersionBumpingBot'
          git config --global user.email 'bot@versionbumpingbot.com'
          git add ${{ inputs.pubspec-path }}
          git commit -m "Bump version to $new_version+$new_build_number [skip ci]"
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${REPO}.git
          git push origin HEAD:${{ inputs.branch-name }}
          echo "version_number=$new_version+$new_build_number" >> $GITHUB_OUTPUT
        fi 