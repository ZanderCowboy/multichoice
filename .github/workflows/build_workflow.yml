---
name: Test, Analyze, Build
on:
  pull_request:
    branches:
      - "develop"
    # types:
    #   - "closed"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  preBuild:
    name: Prebuild - Version Management
    # if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'no-build') == false
    runs-on: ubuntu-latest
    concurrency:
      group: build-group
      cancel-in-progress: false
    outputs:
      version_number: ${{ steps.id_out.outputs.version_number }}
      android_build_flag: ${{ steps.id_out.outputs.android_build_flag }}
      android_environment_flag: ${{ steps.id_out.outputs.android_environment_flag }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) || echo "0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
      - name: Get Current Version From pubspec.yaml
        id: get_current_version
        run: |
          current_version=$(grep 'version:' apps/multichoice/pubspec.yaml | sed 's/version: //')
          echo "current_version=$current_version" >> $GITHUB_OUTPUT
      - name: Generate GitHub App Token
        id: generate_token
        uses: peter-murray/workflow-application-token-action@v4
        with:
          application_id: ${{ secrets.VERSION_BOT_APP_ID }}
          application_private_key: ${{ secrets.VERSION_BOT_APP_PRIVATE_KEY }}
      - name: Update Version in pubspec.yaml if Needed
        id: update_version
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          latest_tag=${{ steps.get_latest_tag.outputs.latest_tag }}
          current_version=${{ steps.get_current_version.outputs.current_version }}
          if [[ "$current_version" > "$latest_tag" ]]; then
            echo "Version in pubspec.yaml ($current_version) is ahead of latest tag ($latest_tag). Proceeding."
            echo "version=$current_version" >> $GITHUB_OUTPUT
          else
            echo "Updating version in pubspec.yaml."
            new_version=$(echo $current_version | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
            sed -i "s/version: .*/version: $new_version/" apps/multichoice/pubspec.yaml
            git config --global user.name 'VersionBumpingBot'
            git config --global user.email 'bot@versionbumpingbot.com'
            git add apps/multichoice/pubspec.yaml
            git commit -m "Bump version to $new_version [skip ci]"
            git push
            echo "version_number=$new_version" >> $GITHUB_OUTPUT
          fi

      - id: id_out
        run: |
          echo "version_number=${{ steps.update_version.outputs.version }}" >> $GITHUB_OUTPUT

  build:
    name: Builds Android App
    needs: [preBuild]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
      statuses: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Flutter and Java
        uses: ./.github/actions/setup-flutter-with-java

      - name: Melos Coverage for Core
        run: melos coverage:core
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: packages/core/coverage/lcov.info
          fail_ci_if_error: true

      - name: Download Android Keystore File
        id: android_keystore
        uses: timheuer/base64-to-file@v1.2.4
        with:
          fileName: upload-keystore.jks
          encodedString: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      - name: Create key.properties File
        run: |
          echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > key.properties
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> key.properties
        working-directory: apps/multichoice/android/
      - name: Create secrets.dart File
        run: |
          mkdir auth
          echo "String webApiKey = '${{ secrets.WEB_API_KEY }}';" > auth/secrets.dart
          echo "String webAppId = '${{ secrets.WEB_APP_ID }}';" >> auth/secrets.dart
          echo "String androidApiKey = '${{ secrets.ANDROID_API_KEY }}';" >> auth/secrets.dart
          echo "String androidAppId = '${{ secrets.ANDROID_APP_ID }}';" >> auth/secrets.dart
          echo "String iosApiKey = '${{ secrets.IOS_API_KEY }}';" >> auth/secrets.dart
          echo "String iosAppId = '${{ secrets.IOS_APP_ID }}';" >> auth/secrets.dart
        working-directory: apps/multichoice/lib/

      ###############################################
      # Build APK
      ###############################################
      - name: Build APK
        run: flutter build apk --release
        working-directory: apps/multichoice/

      ###############################################
      # Upload APK to Firebase App Distribution
      ###############################################
      # - name: Upload APK to Firebase App Distribution
      #   uses: wzieba/Firebase-Distribution-Github-Action@v1
      #   with:
      #     appId: ${{ secrets.APP_ID }}
      #     serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
      #     groups: testers
      #     file: ./apps/multichoice/build/app/outputs/flutter-apk/app-release.apk
      #     releaseNotesFile: ./CHANGELOG.md
      #     debug: true

      ###############################################
      # Build App Bundle
      ###############################################
      - name: Build App Bundle
        run: flutter build appbundle --release
        working-directory: apps/multichoice/

      ###############################################
      # Upload App Bundle as Artifact
      ###############################################
      - name: Upload Android App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: "android-release-appbundle"
          path: ./apps/multichoice/build/app/outputs/bundle/release/app-release.aab

      - name: Create New Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          new_tag=${{ needs.preBuild.outputs.version_number }}
          git tag $new_tag
          git push origin $new_tag
